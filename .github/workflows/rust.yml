name: Rust CI

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main, next ]

jobs:
  build:
    name: Run tests and doctests on ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: ["1.67.0", stable, beta, nightly]
    steps:
    - uses: actions/checkout@v2
    - uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - name: Cache Cargo Dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    - name: build
      run: cargo build -v
    - name: test
      if: ${{ matrix.rust == 'nightly' }}
      run: >
        cargo test -v &&
        cargo doc -v

  build_big_endian:
    # Github actions does not support big endian systems directly, but it does
    # support QEMU. We install QEMU, then build and run the tests on an emulated
    # system. Note: you can also use this approach to test for big endian
    # locally. We are using the cross project for cross compilation:
    # https://github.com/cross-rs/cross
    name: Run tests on big endian architecture
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install or use cached cross-rs/cross
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cross
      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Start Docker (required for cross-rs)
        run: sudo systemctl start docker
      - name: Cross-Compile project
        run: cross build --target=powerpc-unknown-linux-gnu --verbose -v
      - name: Cross-Run Tests using QEMU
        run: cross test --target powerpc-unknown-linux-gnu --verbose -v

  clippy:
    runs-on: ubuntu-latest
    steps:
    - name: install-dependencies
      run: sudo apt update && sudo apt install ninja-build meson nasm
    - uses: actions/checkout@v2
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - run: cargo clippy --all-features -- -D warnings
      env:
        SYSTEM_DEPS_DAV1D_BUILD_INTERNAL: always

  build_fuzz_cargo-fuzz:
    name: "Fuzz targets (cargo-fuzz)"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: dtolnay/rust-toolchain@nightly
    - name: build
      run: |
        cargo install cargo-fuzz
        cargo fuzz build
    - name: fuzz
      run: |
        for target in $(cargo fuzz list); do
          cargo fuzz run "$target" -- -runs=0;
        done

  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Run rustfmt check
      run: cargo fmt -- --check

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

  verify_msrv:
    name: Verify Minimum Supported Rust Version in Cargo.toml
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install or use cached `cargo-msrv`
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-msrv

      - name: Verify Minimum Rust Version
        run: cargo-msrv verify
